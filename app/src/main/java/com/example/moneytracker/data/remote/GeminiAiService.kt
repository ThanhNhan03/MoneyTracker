package com.example.moneytracker.data.remote

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONArray
import org.json.JSONObject
import java.util.concurrent.TimeUnit
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class GeminiAiService @Inject constructor() {
    
    private val client = OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build()
    
    private val apiKey = "AIzaSyCUl8XLGJqAAYapqspsOwBDXGwo8pxR7Mg"
    private val baseUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    
    suspend fun generateFinancialInsights(
        totalIncome: Double,
        totalExpense: Double,
        balance: Double,
        topExpenseCategory: String?,
        transactionCount: Int,
        monthYear: String
    ): List<String> = withContext(Dispatchers.IO) {
        try {
            val prompt = buildPrompt(totalIncome, totalExpense, balance, topExpenseCategory, transactionCount, monthYear)
            
            val requestBody = JSONObject().apply {
                put("contents", JSONArray().apply {
                    put(JSONObject().apply {
                        put("parts", JSONArray().apply {
                            put(JSONObject().apply {
                                put("text", prompt)
                            })
                        })
                    })
                })
                put("generationConfig", JSONObject().apply {
                    put("temperature", 0.8)
                    put("topK", 40)
                    put("topP", 0.95)
                    put("maxOutputTokens", 1024)
                })
            }
            
            val request = Request.Builder()
                .url("$baseUrl?key=$apiKey")
                .post(requestBody.toString().toRequestBody("application/json".toMediaType()))
                .build()
            
            val response = client.newCall(request).execute()
            
            if (response.isSuccessful) {
                val responseBody = response.body?.string()
                parseGeminiResponse(responseBody)
            } else {
                // Th·ª≠ l·∫°i v·ªõi prompt ƒë∆°n gi·∫£n h∆°n
                generateSimpleFallbackInsights(totalIncome, totalExpense, balance, topExpenseCategory)
            }
        } catch (e: Exception) {
            // Th·ª≠ l·∫°i v·ªõi prompt ƒë∆°n gi·∫£n h∆°n
            generateSimpleFallbackInsights(totalIncome, totalExpense, balance, topExpenseCategory)
        }
    }
    
    private fun buildPrompt(
        totalIncome: Double,
        totalExpense: Double,
        balance: Double,
        topExpenseCategory: String?,
        transactionCount: Int,
        monthYear: String
    ): String {
        return """
            B·∫°n l√† m·ªôt chuy√™n gia t√†i ch√≠nh h√†i h∆∞·ªõc v√† d√≠ d·ªèm. H√£y ph√¢n t√≠ch d·ªØ li·ªáu t√†i ch√≠nh sau v√† ƒë∆∞a ra 3-4 nh·∫≠n x√©t vui nh·ªôn, s√¢u s·∫Øc b·∫±ng ti·∫øng Vi·ªát:
            
            D·ªØ li·ªáu th√°ng $monthYear:
            - Thu nh·∫≠p: ${totalIncome.toInt()} VND
            - Chi ti√™u: ${totalExpense.toInt()} VND  
            - S·ªë d∆∞: ${balance.toInt()} VND
            - Danh m·ª•c chi ti√™u nhi·ªÅu nh·∫•t: ${topExpenseCategory ?: "Kh√¥ng c√≥"}
            - T·ªïng s·ªë giao d·ªãch: $transactionCount
            
            Y√™u c·∫ßu:
            1. M·ªói insight d√†i 8 t·ª´
            2. S·ª≠ d·ª•ng ng√¥n ng·ªØ h√†i h∆∞·ªõc, d√≠ d·ªèm nh∆∞ng v·∫´n c√≥ √Ω nghƒ©a
            3. C√≥ th·ªÉ s·ª≠ d·ª•ng emoji ph√π h·ª£p
            4. ƒê∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø nh∆∞ng vui nh·ªôn
            5. Ph·∫£n √°nh ƒë√∫ng t√¨nh h√¨nh t√†i ch√≠nh (t√≠ch c·ª±c/ti√™u c·ª±c)
            
            Tr·∫£ v·ªÅ ch·ªâ 3 c√¢u insight, m·ªói c√¢u tr√™n m·ªôt d√≤ng, kh√¥ng c√≥ s·ªë th·ª© t·ª± hay k√Ω hi·ªáu ƒë·∫∑c bi·ªát.
        """.trimIndent()
    }
    
    private fun parseGeminiResponse(responseBody: String?): List<String> {
        return try {
            val jsonResponse = JSONObject(responseBody ?: "")
            val candidates = jsonResponse.getJSONArray("candidates")
            val content = candidates.getJSONObject(0)
                .getJSONObject("content")
            val parts = content.getJSONArray("parts")
            val text = parts.getJSONObject(0).getString("text")
            
            // Parse the response and split into individual insights
            val insights = text.split("\n")
                .filter { it.trim().isNotEmpty() }
                .map { it.trim() }
                .take(4)
            
            insights
        } catch (e: Exception) {
            listOf("H√¥m nay AI ƒëang ngh·ªâ ph√©p, h·∫πn b·∫°n l·∫ßn sau! ü§ñ‚ú®")
        }
    }
    
    private suspend fun generateSimpleFallbackInsights(
        totalIncome: Double,
        totalExpense: Double,
        balance: Double,
        topExpenseCategory: String?
    ): List<String> = withContext(Dispatchers.IO) {
        return@withContext try {
            // Prompt si√™u ƒë∆°n gi·∫£n cho fallback
            val simpleFallbackPrompt = """
                Vi·∫øt 2-3 c√¢u ng·∫Øn v√† vui v·ªÅ t√†i ch√≠nh:
                Thu nh·∫≠p: ${totalIncome.toInt()} VND
                Chi ti√™u: ${totalExpense.toInt()} VND
                S·ªë d∆∞: ${balance.toInt()} VND
                
                M·ªói c√¢u 8-12 t·ª´, c√≥ emoji, vui v·∫ª.
            """.trimIndent()
            
            val requestBody = JSONObject().apply {
                put("contents", JSONArray().apply {
                    put(JSONObject().apply {
                        put("parts", JSONArray().apply {
                            put(JSONObject().apply {
                                put("text", simpleFallbackPrompt)
                            })
                        })
                    })
                })
                put("generationConfig", JSONObject().apply {
                    put("temperature", 0.7)
                    put("maxOutputTokens", 200)
                })
            }
            
            val request = Request.Builder()
                .url("$baseUrl?key=$apiKey")
                .post(requestBody.toString().toRequestBody("application/json".toMediaType()))
                .build()
            
            val response = client.newCall(request).execute()
            
            if (response.isSuccessful) {
                val responseBody = response.body?.string()
                parseGeminiResponse(responseBody)
            } else {
                // N·∫øu th·∫•t b·∫°i ho√†n to√†n, √≠t nh·∫•t v·∫´n c√≥ 1 c√¢u AI t·ªëi thi·ªÉu
                generateMinimalAiInsight(balance)
            }
        } catch (e: Exception) {
            // Cu·ªëi c√πng, d√πng AI v·ªõi prompt t·ªëi thi·ªÉu
            generateMinimalAiInsight(balance)
        }
    }
    
    private suspend fun generateMinimalAiInsight(balance: Double): List<String> = withContext(Dispatchers.IO) {
        return@withContext try {
            val minimalPrompt = if (balance > 0) {
                "Vi·∫øt 1 c√¢u vui v·ªÅ vi·ªác c√≥ ti·ªÅn d∆∞: ${balance.toInt()} VND"
            } else {
                "Vi·∫øt 1 c√¢u ƒë·ªông vi√™n vui v·ªÅ vi·ªác h·∫øt ti·ªÅn"
            }
            
            val requestBody = JSONObject().apply {
                put("contents", JSONArray().apply {
                    put(JSONObject().apply {
                        put("parts", JSONArray().apply {
                            put(JSONObject().apply {
                                put("text", minimalPrompt)
                            })
                        })
                    })
                })
                put("generationConfig", JSONObject().apply {
                    put("temperature", 0.8)
                    put("maxOutputTokens", 50)
                })
            }
            
            val request = Request.Builder()
                .url("$baseUrl?key=$apiKey")
                .post(requestBody.toString().toRequestBody("application/json".toMediaType()))
                .build()
            
            val response = client.newCall(request).execute()
            
            if (response.isSuccessful) {
                val responseBody = response.body?.string()
                parseGeminiResponse(responseBody)
            } else {
                // Th·∫•t b·∫°i ho√†n to√†n - ch·ªâ 1 c√¢u tƒ©nh duy nh·∫•t
                listOf("AI ƒëang ngh·ªâ, nh∆∞ng b·∫°n v·∫´n tuy·ªát v·ªùi! ‚ú®üòä")
            }
        } catch (e: Exception) {
            // C√¢u cu·ªëi c√πng khi m·ªçi th·ª© ƒë·ªÅu th·∫•t b·∫°i
            listOf("K·∫øt n·ªëi AI c√≥ v·∫•n ƒë·ªÅ, nh∆∞ng tinh th·∫ßn v·∫´n ·ªïn! üí™üöÄ")
        }
    }
    
    suspend fun generateCustomInsights(customPrompt: String): List<String> = withContext(Dispatchers.IO) {
        try {
            val requestBody = JSONObject().apply {
                put("contents", JSONArray().apply {
                    put(JSONObject().apply {
                        put("parts", JSONArray().apply {
                            put(JSONObject().apply {
                                put("text", customPrompt)
                            })
                        })
                    })
                })
                put("generationConfig", JSONObject().apply {
                    put("temperature", 0.9)
                    put("topK", 40)
                    put("topP", 0.95)
                    put("maxOutputTokens", 512)
                })
            }
            
            val request = Request.Builder()
                .url("$baseUrl?key=$apiKey")
                .post(requestBody.toString().toRequestBody("application/json".toMediaType()))
                .build()
            
            val response = client.newCall(request).execute()
            
            if (response.isSuccessful) {
                val responseBody = response.body?.string()
                parseGeminiResponse(responseBody)
            } else {
                listOf("AI ƒëang b·∫≠n, th·ª≠ l·∫°i sau nh√©! ü§ñüí≠")
            }
        } catch (e: Exception) {
            listOf("L·ªói k·∫øt n·ªëi AI, h√£y ki·ªÉm tra m·∫°ng! üì∂‚ùå")
        }
    }
}
